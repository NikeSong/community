<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.community.dao.MessageMapper">

    <sql id="selectFields">
        id,from_id,to_id,conversation_id,content,status,create_time
    </sql>

    <sql id="insertFields">
        from_id,to_id,conversation_id,content,status,create_time
    </sql>
    <!--
    查询当前用户的会话列表,针对每个会话只返回一条最新的私信
    List<Message> selectConversations(int userId,int offset,int limit);-->
    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status !=2
                and from_id != 1
                and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset},#{limit}
    </select>

    <!--
    查询当前用户的会话数量
    int selectConversationCount(int userId);-->
    <select id="selectConversationCount" resultType="int">
        select count(m.max_id) from (
            select max(id) as max_id from message
            where status !=2
                and from_id != 1
                and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as m
    </select>

    <!--
    查询某会话包含的私信列表
    List<Message> selectLetters(String conversationId,int offset,int limit);-->
    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where conversation_id = #{conversationId}
            and status != 2
            and from_id != 1
        order by id desc
        limit #{offset},#{limit}
    </select>

    <!--
    查询某会话包含的私信数量
    int selectLetterCount(String conversationId);-->
    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where conversation_id = #{conversation_id}
        and status != 2
        and from_id != 1
    </select>

    <!--
    查询未读私信数量(总共的或者针对某一个会话的)
    int selectLetterUnreadCount(int userId,String conversationId);-->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
            and from_id != 1
            and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>

    <!--
    增加一条私信
    int insertMessage(Message message);
    -->
    <insert id="insertMessage" parameterType="Message">
        insert into message(<include refid="insertFields"></include>)
        values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <!--
    更改消息状态
    int updateStatus(List<Integer> ids, int status);-->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>